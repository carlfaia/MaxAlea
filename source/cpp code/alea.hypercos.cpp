#include "c74_min.h"#include <random>#include <cmath>using namespace c74::min;class alea_hypercos : public object<alea_hypercos> {public:    MIN_DESCRIPTION {"Generates random values based on a hyperbolic cosine distribution"};    MIN_TAGS {"random, distribution, hyperbolic, cosine"};    MIN_AUTHOR {"Carl Faia"};    MIN_RELATED {"random"};    inlet<> input {this, "(bang) Generate random value"};    inlet<> a_inlet {this, "(float) Set 'a' value"};    inlet<> b_inlet {this, "(float) Set 'b' value"};    outlet<> output {this, "(float) Output random value"};    alea_hypercos(const atoms& args = {}) {        if (args.size() > 0 && args[0].a_type == c74::max::e_max_atomtypes::A_FLOAT) {            a = args[0];        }        if (args.size() > 1 && args[1].a_type == c74::max::e_max_atomtypes::A_FLOAT) {            b = args[1];        }        // Initialize with a random seed        seed_value = std::random_device{}();        generator.seed(seed_value);    }    message<> bang {this, "bang", "Generate random value",        MIN_FUNCTION {            generate_random_value();            return {};        }    };    message<> float_msg {this, "float", "Set 'a' or 'b' value",        MIN_FUNCTION {            if (inlet == 1) {                a = args[0];            }            else if (inlet == 2) {                b = args[0];            }            return {};        }    };    message<> int_msg {this, "int", "Set seed value",        MIN_FUNCTION {            seed_value = args[0];            generator.seed(seed_value);            return {};        }    };    message<> seed_msg {this, "seed", "Set seed value",        MIN_FUNCTION {            seed_value = args[0];            generator.seed(seed_value);            return {};        }    };    message<> info {this, "info", "Output current state",        MIN_FUNCTION {            cout << "alea_hypercos state:" << endl;            cout << "  a: " << a << endl;            cout << "  b: " << b << endl;            cout << "  seed: " << seed_value << endl;            return {};        }    };private:    void generate_random_value() {        std::uniform_real_distribution<double> dist(0.0, 1.0);        double random_value = dist(generator);        double g = std::tan(pi * random_value) / 2;        double n = ((std::log(g)) * a) + b;        double result = n;        output.send(result);    }    std::mt19937 generator;    double a = 0.5;    double b = 0.5;    unsigned long seed_value = std::random_device{}();    const double pi = 3.141592653589793238462643383279502884;};MIN_EXTERNAL(alea_hypercos);
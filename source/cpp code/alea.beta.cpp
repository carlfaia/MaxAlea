#include "c74_min.h"#include <random>using namespace c74::min;class alea_beta : public object<alea_beta> {public:    MIN_DESCRIPTION {"Generate random numbers based on the beta distribution"};    MIN_TAGS {"random, stochastic"};    MIN_AUTHOR {"Carl Faia"};    MIN_RELATED {"arcsin, random"};    inlet<>  input {this, "(bang) Generate beta random number"};    inlet<>  inlet_a {this, "(float) a parameter for beta distribution", "float"};    inlet<>  inlet_b {this, "(float) b parameter for beta distribution", "float"};    outlet<> output {this, "(float) Beta random number", "float"};    message<> bang {this, "bang", "Generate beta random number",        MIN_FUNCTION {            generate_beta();            return {};        }    };    message<> float_input {this, "float", "Set a or b parameter",        MIN_FUNCTION {            if (inlet == 1) {                set_parameter(args[0], m_a, "a");            } else if (inlet == 2) {                set_parameter(args[0], m_b, "b");            }            return {};        }    };    message<> int_input {this, "int", "Set a or b parameter",        MIN_FUNCTION {            if (inlet == 1) {                set_parameter(static_cast<double>(args[0]), m_a, "a");            } else if (inlet == 2) {                set_parameter(static_cast<double>(args[0]), m_b, "b");            }            return {};        }    };    message<> seed {this, "seed", "Set seed for the random number generator",        MIN_FUNCTION {            uint32_t seed_value = safe_cast_to_uint32(args[0]);            set_seed(seed_value);            return {};        }    };    message<> info {this, "info", "Get info about the current state",        MIN_FUNCTION {            cout << "********************" << endl;            cout << "alea-beta : seed = " << m_seed << endl;            cout << "alea-beta : a = " << m_a << endl;            cout << "alea-beta : b = " << m_b << endl;            cout << "alea-beta : last = " << m_last_rand << endl;            cout << "alea-beta : iterations = " << m_count << endl;            cout << "********************" << endl;            return {};        }    };    alea_beta(const atoms& args = {}) : m_engine(m_rd()), m_a(0.5), m_b(0.5), m_last_rand(0.0), m_seed(0), m_count(0) {        if (args.size() > 0) {            m_a = static_cast<double>(args[0]);        }        if (args.size() > 1) {            m_b = static_cast<double>(args[1]);        }        set_seed(static_cast<uint32_t>(std::time(0)));    }private:    void generate_beta() {        std::gamma_distribution<> ga(m_a, 1.0);        std::gamma_distribution<> gb(m_b, 1.0);        double y1 = ga(m_engine);        double y2 = gb(m_engine);        m_last_rand = y1 / (y1 + y2);        m_count++;        output.send(m_last_rand);    }    void set_seed(uint32_t seed_value) {        m_seed = seed_value;        m_engine.seed(m_seed);    }    void set_parameter(double value, double& parameter, const char* name) {        if (value <= 0) {            error("alea-beta : %s must be > 0. Using default 0.00001.", name);            parameter = 0.00001;        } else {            parameter = value;        }    }    uint32_t safe_cast_to_uint32(const atom& a) {        if (a.a_type == c74::max::A_LONG) {            return static_cast<uint32_t>(a.a_w.w_long);        } else if (a.a_type == c74::max::A_FLOAT) {            return static_cast<uint32_t>(a.a_w.w_float);        } else {            return 0;        }    }    double m_a;    double m_b;    double m_last_rand;    uint32_t m_seed;    long m_count;    std::random_device m_rd;    std::mt19937 m_engine;};MIN_EXTERNAL(alea_beta);
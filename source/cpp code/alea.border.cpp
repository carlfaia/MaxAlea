#include "c74_min.h"using namespace c74::min;class alea_border : public object<alea_border> {public:    MIN_DESCRIPTION{"Fold over values outside limits to limits"};    MIN_TAGS{"utility"};    MIN_AUTHOR{"Carl Faia"};    MIN_RELATED {"scale, clip"};    inlet<> input{this, "(float/int) value to be folded"};    inlet<> low_limit{this, "(float/int) low limit"};    inlet<> high_limit{this, "(float/int) high limit"};    outlet<> output{this, "(float) folded output"};    alea_border(const atoms& args = {}) {        if (args.size() > 0) {            m_low1 = atom_to_double(args[0]);        }        if (args.size() > 1) {            m_high2 = atom_to_double(args[1]);        }    }    message<> bang{this, "bang", "Generate new value",        MIN_FUNCTION {            do_fold();            return {};        }    };    message<> float_input{this, "float", "Set value to be folded or limits",        MIN_FUNCTION {            handle_input(static_cast<double>(args[0]), inlet);            return {};        }    };    message<> int_input{this, "int", "Set value to be folded or limits",        MIN_FUNCTION {            handle_input(static_cast<double>(args[0].a_w.w_long), inlet);            return {};        }    };    message<> info{this, "info", "Get current parameters and seed info",        MIN_FUNCTION {            cout << "********************" << endl;            cout << "alea-border : low1 = " << m_low1 << endl;            cout << "alea-border : high2 = " << m_high2 << endl;            cout << "********************" << endl;            return {};        }    };private:    void do_fold() {        double n = m_value;        double a = m_low1;        double b = m_high2;        if (a == b) {            m_result = a;        } else if (n < a) {            m_result = a;        } else if (n > b) {            m_result = b;        } else {            m_result = n;        }        output.send(m_result);    }    void handle_input(double value, int inlet) {        if (inlet == 0) {            m_value = value;            do_fold();        } else if (inlet == 1) {            m_low1 = value;        } else if (inlet == 2) {            m_high2 = value;        }    }    double atom_to_double(const atom& a) {        return (a.a_type == c74::max::A_FLOAT) ? static_cast<double>(a.a_w.w_float) : static_cast<double>(a.a_w.w_long);    }    double m_value{0};    double m_result{0};    double m_low1{1};    double m_high2{128};};MIN_EXTERNAL(alea_border);
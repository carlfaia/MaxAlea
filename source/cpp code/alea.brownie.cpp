#include "c74_min.h"#include <random>using namespace c74::min;class alea_brownie : public object<alea_brownie> {public:    MIN_DESCRIPTION{"Generates a Brownian motion value within specified boundaries"};    MIN_TAGS{"random, brownian"};    MIN_AUTHOR{"Carl Faia"};    MIN_RELATED{"random"};    inlet<> input_bang {this, "(bang) Generate Brownian motion value"};    inlet<> input_start {this, "(float/int) Start value"};    inlet<> input_low {this, "(float/int) Low limit"};    inlet<> input_high {this, "(float/int) High limit"};    inlet<> input_bandwidth {this, "(float) Bandwidth"};    outlet<> output {this, "(float/int) Brownian motion value"};    alea_brownie(const atoms& args = {}) {        if (args.size() > 0) m_start = atom_to_double(args[0]);        if (args.size() > 1) m_low = atom_to_double(args[1]);        if (args.size() > 2) m_high = atom_to_double(args[2]);        if (args.size() > 3) m_bandwidth = atom_to_double(args[3]);        if (args.size() > 4) {            set_seed(static_cast<uint32_t>(static_cast<long>(args[4])));        } else {            set_seed(std::random_device{}());        }    }    message<> bang {this, "bang", "Generate and output Brownian motion value",        MIN_FUNCTION {            generate_brownian();            return {};        }    };    message<> float_input {this, "float", "Set start, low, high, or bandwidth value",        MIN_FUNCTION {            handle_input(args[0], inlet);            return {};        }    };    message<> int_input {this, "int", "Set start, low, high, or bandwidth value",        MIN_FUNCTION {            handle_input(static_cast<double>(args[0].a_w.w_long), inlet);            return {};        }    };    message<> seed {this, "seed", "Set the random seed",        MIN_FUNCTION {            if (!args.empty()) {                set_seed(static_cast<uint32_t>(static_cast<long>(args[0])));            }            return {};        }    };    message<> info {this, "info", "Print current state information",        MIN_FUNCTION {            cout << "Start: " << m_start << endl;            cout << "Low: " << m_low << endl;            cout << "High: " << m_high << endl;            cout << "Bandwidth: " << m_bandwidth << endl;            cout << "Seed: " << m_seed << endl;            return {};        }    };private:    std::mt19937 m_gen;    uint32_t m_seed;    double m_start {51.75};    double m_low {25.75};    double m_high {115.5};    double m_bandwidth {2.1};    bool m_type {false};    void set_seed(uint32_t seed) {        m_seed = seed;        m_gen.seed(seed);    }    void generate_brownian() {        std::normal_distribution<> dist(0.0, m_bandwidth);        double step = dist(m_gen);        double new_value = m_start + step;        if (new_value > m_high) {            new_value = 2 * m_high - new_value;        } else if (new_value < m_low) {            new_value = 2 * m_low - new_value;        }        m_start = new_value;        if (m_type) {            output.send(static_cast<int>(new_value + 0.5));        } else {            output.send(new_value);        }    }    void handle_input(double value, int inlet) {        switch (inlet) {            case 1: m_start = value; m_type = false; break;            case 2: m_low = value; break;            case 3: m_high = value; break;            case 4: m_bandwidth = value; break;        }    }    double atom_to_double(const atom& a) {        return (a.a_type == c74::max::A_FLOAT) ? static_cast<double>(a.a_w.w_float) : static_cast<double>(a.a_w.w_long);    }};MIN_EXTERNAL(alea_brownie);